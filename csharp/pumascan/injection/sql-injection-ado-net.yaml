rules:
- id: sql-injection-ado-net
  languages:
  - csharp
  message: 'ADO.NET classes allow applications to communicate directly to a backend
    database without using an Object Relational Mapping (ORM) framework. SEC0107 identifies
    the following classes allowing dynamic SQL statements to be constructed and executed:'
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://www.owasp.org/index.php/Top_10-2017_A1-Injection
    - https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand(v=vs.110).aspx
    - https://docs.microsoft.com/en-us/dotnet/api/microsoft.data.sqlite.sqlitecommand
    - https://docs.microsoft.com/en-us/dotnet/api/system.data.oledb.oledbcommand
    - https://docs.microsoft.com/en-us/dotnet/api/system.data.odbc.odbccommand
    source-rule-url: https://pumascan.com/rules/#sec0107-sql-injection-ado-net
    technology:
    - .net
  mode: taint
  pattern-sources:
    - patterns:
      - pattern: $ARG
      - pattern-inside: |
          public $TYPE $M(...,$ARG,...){...}
  pattern-sinks:
    - patterns:
      - pattern: |
          "..." + $A
      - pattern-inside: |
          new SqlCommand(...)
  severity: WARNING
