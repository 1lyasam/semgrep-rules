rules:
- id: detect-angular-element-methods
  languages:
  - javascript
  - typescript
  message: Use of angular.element can lead to XSS if user-input is treated as part
    of the HTML element within `$SINK`.  It is recommended to contextually output
    encode user-input, before inserting into `$SINK`.  If the HTML needs to be preseved
    it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.
  metadata:
    category: security
    confidence: LOW
    cwe: "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
    references:
    - https://docs.angularjs.org/api/ng/function/angular.element
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    technology:
    - angularjs
  mode: taint
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: $sce.getTrustedHtml(...)
      - pattern: $sanitize(...)
      - pattern: DOMPurify.sanitize(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          angular.element(...). ... .$SINK($QUERY)
      - pattern-inside: |
          $ANGULAR = angular.element(...)
          ...
          $ANGULAR. ... .$SINK($QUERY)
    - metavariable-regex:
        metavariable: $SINK
        regex: ^(after|append|html|prepend|replaceWith|wrap)$
    - pattern: $QUERY
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $scope
      - pattern: $rootScope
      - pattern: $injector.get('$rootScope')
      - pattern: $injector.get('$scope')
  severity: INFO
