rules:
  - id: jwt-exposed-credentials
    languages:
      - javascript
      - typescript
    metadata:
      cwe: "CWE-798: Use of Hard-coded Credentials"
      references: 
        - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
      owasp:
        - A05:2021 - Security Misconfiguration
        - A06:2017 - Security Misconfiguration
      category: security
      technology:
        - jose
        - jwt
    message: >- 
      A hard-coded credential was detected. It is not recommended 
      to store credentials in source-code, as this risks secrets
      being leaked and used by either an internal or external malicious adversary. 
      It is recommended to use environment variables to 
      securely provide credentials or retrieve credentials from 
      a secure vault or HSM (Hardware Security Module).
    severity: WARNING
    mode: taint
    pattern-sources:
        - patterns:
            - pattern-either:
                - pattern: |
                    {...,password: '...',...}
                - pattern: $OBJ. ... .password = '...'
    pattern-sinks:
        - patterns:
            - pattern-either:
                - pattern-inside: |
                    $JWT = require("jsonwebtoken")
                    ...
                - pattern-inside: |
                    import $JWT from "jsonwebtoken"
                    ...
                - pattern-inside: |
                    import * as $JWT from "jsonwebtoken"
                    ...
                - pattern-inside: |
                    import {...,$JWT,...} from "jsonwebtoken"
                    ...
            - pattern-either:
                - pattern-inside: |
                    $JWT.sign($F,...);
                - patterns:
                    - pattern-inside: |
                        const { ..., $JWT, ... } = $JOSE
                        ...
                    - pattern-inside: $JWT.sign($F,...)
            - focus-metavariable: $F