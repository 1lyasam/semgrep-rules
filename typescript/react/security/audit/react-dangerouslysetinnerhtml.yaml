rules:
  - id: react-dangerouslysetinnerhtml
    mode: taint
    pattern-sources:
      - patterns:
          - pattern: $X
    pattern-sinks:
      - patterns:
          - focus-metavariable: $X
          - pattern-either:
              - pattern: |
                  {dangerouslySetInnerHTML: {__html: <... $X ...>}}
              - pattern: |
                  <$Y ... dangerouslySetInnerHTML={<... $X ...>} />
          - pattern-not: |
              <... {__html: "..."} ...>
    pattern-sanitizers:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from "dompurify";
                  ...
              - pattern-inside: |
                  import * as $S from "dompurify";
                  ...
              - pattern-inside: |
                  import $S from "isomorphic-dompurify";
                  ...
          - pattern: $S.sanitize(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from 'xss';
                  ...
              - pattern-inside: |
                  import * as $S from 'xss';
                  ...
              - pattern-inside: |
                  import $S from 'sanitize-html';
                  ...
              - pattern-inside: |
                  import * as $S from "sanitize-html";
                  ...
          - pattern: $S(...)
    message: >-
      Detection of trusting HTML from code. This is risky because you can
      inadvertently expose your users to cross-site scripting (XSS) attacks.
      This can lead to attackers accessing sensitive information. Consider doing
      this without dangerouslySetInnerHTML or use a sanitization library such as
      DOMPurify to santize your HTML.
    metadata:
      cwe: "CWE-79: Improper Neutralization of Input During Web Page Generation
        ('Cross-site Scripting')"
      owasp:
        - "A07:2017: - Cross-Site Scripting (XSS)"
        - "A03:2022: - Injection"
      references:
        - https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml
      category: security
      confidence: LOW
      technology:
        - react
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    languages:
      - typescript
      - javascript
    severity: WARNING
