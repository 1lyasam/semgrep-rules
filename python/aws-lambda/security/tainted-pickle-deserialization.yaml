rules:
- id: tainted-pickle-deserialization
  mode: taint
  pattern-sources:
     - patterns:
         - pattern: |
             def $HANDLER($EVENT, ...):
               ...
         - focus-metavariable: $EVENT
  pattern-sinks:
  - patterns:
    - pattern: $SINK
    - pattern-either:
      - pattern-inside: pickle.load($SINK,...)
      - pattern-inside: pickle.loads($SINK,...)
      - pattern-inside: _pickle.load($SINK,...)
      - pattern-inside: _pickle.loads($SINK,...)
      - pattern-inside: cPickle.load($SINK,...)
      - pattern-inside: cPickle.loads($SINK,...)
      - pattern-inside: dill.load($SINK,...)
      - pattern-inside: dill.loads($SINK,...)
      - pattern-inside: shelve.open($SINK,...)
  message: >-
    Insecure deserialization (called pickling in python) is when user-controllable data is deserialized by an application. 
    This potentially enables an attacker to manipulate serialized objects in order to pass harmful data into the application code.
    Many deserialization-based attacks are completed before deserialization is finished. 
    This means that the deserialization process itself can initiate an attack, even if the app's own functionality does not directly interact with the malicious object.
    For deserializing data from untrusted sources we recommend using YAML or JSON libraries with built-in protections.
  metadata:
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://portswigger.net/web-security/deserialization
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    category: security
    technology:
    - python
    - aws-lambda
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
  languages:
  - python
  severity: WARNING
