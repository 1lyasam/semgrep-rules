rules:
- id: avoid-pickle
  mode: taint
  pattern-sources:
    - patterns:
        - pattern-either:
            - pattern-inside: >
                class $SERVER(..., http.server.BaseHTTPRequestHandler,
                ...):
                  ...
            - pattern-inside: |
                class $SERVER(..., http.server.StreamRequestHandler, ...):
                  ...
            - pattern-inside: >
                class $SERVER(..., http.server.DatagramRequestHandler,
                ...):
                  ...
        - pattern-either:
            - pattern: self.$PROPERTY
            - pattern: self.$PROPERTY.get(...)
            - pattern: self.$PROPERTY[...]
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-sinks:
    - pattern-either:
        - pattern: pickle.load(...)
        - pattern: pickle.loads(...)
  metadata:
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    references:
      - https://portswigger.net/web-security/deserialization
      - https://docs.python.org/3/library/pickle.html
      - https://docs.python.org/3/library/pickle.html
      - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    category: security
    technology:
    - python
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
  languages:
    - python
  message: >-
     Insecure deserialization (called pickling in python) is when user-controllable data is deserialized by an application.
     This potentially enables an attacker to manipulate serialized objects in order to pass harmful data into the application code.
     Many deserialization-based attacks are completed before deserialization is finished.
     This means that the deserialization process itself can initiate an attack, even if the app's own functionality does not directly interact with the malicious object.
  severity: ERROR
- id: avoid-cPickle
  mode: taint
  pattern-sources:
    - patterns:
        - pattern-either:
            - pattern-inside: >
                class $SERVER(..., http.server.BaseHTTPRequestHandler,
                ...):
                  ...
            - pattern-inside: |
                class $SERVER(..., http.server.StreamRequestHandler, ...):
                  ...
            - pattern-inside: >
                class $SERVER(..., http.server.DatagramRequestHandler,
                ...):
                  ...
        - pattern-either:
            - pattern: self.$PROPERTY
            - pattern: self.$PROPERTY.get(...)
            - pattern: self.$PROPERTY[...]
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-sinks:
    - pattern-either:
        - pattern: cPickle.load(...)
        - pattern: cPickle.loads(...)
        - pattern: _pickle.load(...)
        - pattern: _pickle.loads(...)
  metadata:
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    references:
      - https://portswigger.net/web-security/deserialization
      - https://docs.python.org/3/library/pickle.html
      - https://docs.python.org/3/library/pickle.html
      - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    category: security
    technology:
    - python
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
  languages:
    - python
  message: >-
     Insecure deserialization (called pickling in python) is when user-controllable data is deserialized by an application.
     This potentially enables an attacker to manipulate serialized objects in order to pass harmful data into the application code.
     Many deserialization-based attacks are completed before deserialization is finished.
     This means that the deserialization process itself can initiate an attack, even if the app's own functionality does not directly interact with the malicious object.
     This is also the case for the C implementations `cPickle` or `_pickle`.
  severity: ERROR
- id: avoid-dill
  mode: taint
  pattern-sources:
    - patterns:
        - pattern-either:
            - pattern-inside: >
                class $SERVER(..., http.server.BaseHTTPRequestHandler,
                ...):
                  ...
            - pattern-inside: |
                class $SERVER(..., http.server.StreamRequestHandler, ...):
                  ...
            - pattern-inside: >
                class $SERVER(..., http.server.DatagramRequestHandler,
                ...):
                  ...
        - pattern-either:
            - pattern: self.$PROPERTY
            - pattern: self.$PROPERTY.get(...)
            - pattern: self.$PROPERTY[...]
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-sinks:
    - patterns:
        - focus-metavariable: $SINK
        - pattern-either:
            - patterns:
                - pattern: dill.Unpickler($SINK, ...)
            - pattern-either:
                - pattern: dill.load($SINK, ...)
                - pattern: dill.loads($SINK, ...)
                - pattern: dill.load_module(..., filename=$SINK, ...)
                - pattern: dill.load_module_asdict(..., filename=$SINK, ...)
                - pattern: dill.temp.load($SINK, ...)
                - pattern: dill.temp.load_source($SINK, ...)
                - pattern: dill.temp.loadIO($SINK, ...)
                - pattern: dill.temp.loadIO_source($SINK, ...)
  message: >-
    Insecure deserialization (called pickling in python) is when user-controllable data is deserialized by an application. 
    This potentially enables an attacker to manipulate serialized objects in order to pass harmful data into the application code.
    Many deserialization-based attacks are completed before deserialization is finished. 
    This means that the deserialization process itself can initiate an attack, even if the app's own functionality does not directly interact with the malicious object.
    `dill` allows arbitrary user defined classes and functions to be serialized. We do not recommend using it for unpickling data from untrusted sources.
    For deserializing data from untrusted sources we recommend using YAML or JSON libraries with built-in protections.
  metadata:
    references:
      - https://portswigger.net/web-security/deserialization
      - https://pypi.org/project/dill/
      - https://dill.readthedocs.io/en/latest/index.html
      - https://docs.python.org/3/library/pickle.html
      - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    owasp:
      - A08:2017 - Insecure Deserialization
      - A08:2021 - Software and Data Integrity Failures
    cwe:
      - "CWE-502: Deserialization of Untrusted Data"
    category: security
    technology:
      - python
      - dill
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
      - vuln
    likelihood: MEDIUM
    impact: HIGH
  languages:
    - python
  severity: ERROR
- id: avoid-shelve
  mode: taint
  pattern-sources:
    - patterns:
        - pattern-either:
            - pattern-inside: >
                class $SERVER(..., http.server.BaseHTTPRequestHandler,
                ...):
                  ...
            - pattern-inside: |
                class $SERVER(..., http.server.StreamRequestHandler, ...):
                  ...
            - pattern-inside: >
                class $SERVER(..., http.server.DatagramRequestHandler,
                ...):
                  ...
        - pattern-either:
            - pattern: self.$PROPERTY
            - pattern: self.$PROPERTY.get(...)
            - pattern: self.$PROPERTY[...]
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-sinks:
    - pattern-either:
        - pattern: shelve.open(...)
  message: >-
    Insecure deserialization (called pickling in python) is when user-controllable data is deserialized by an application. 
    This potentially enables an attacker to manipulate serialized objects in order to pass harmful data into the application code.
    Many deserialization-based attacks are completed before deserialization is finished. 
    This means that the deserialization process itself can initiate an attack, even if the app's own functionality does not directly interact with the malicious object.
    `shelve` uses `pickle` and should be avoided with data from untrusted sources.
  metadata:
    references:
      - https://portswigger.net/web-security/deserialization
      - https://pypi.org/project/dill/
      - https://dill.readthedocs.io/en/latest/index.html
      - https://docs.python.org/3/library/pickle.html
      - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    owasp:
      - A08:2017 - Insecure Deserialization
      - A08:2021 - Software and Data Integrity Failures
    cwe:
      - "CWE-502: Deserialization of Untrusted Data"
    category: security
    technology:
      - python
      - shelve
      - http.server
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
      - vuln
    likelihood: MEDIUM
    impact: HIGH
  languages:
    - python
  severity: ERROR
