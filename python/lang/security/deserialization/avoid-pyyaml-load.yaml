rules:
  - id: avoid-pyyaml-load
    mode: taint
    pattern-sources:
          - patterns:
              - pattern-either:
                  - pattern-inside: >
                      class $SERVER(..., http.server.BaseHTTPRequestHandler,
                      ...):
                        ...
                  - pattern-inside: |
                      class $SERVER(..., http.server.StreamRequestHandler, ...):
                        ...
                  - pattern-inside: >
                      class $SERVER(..., http.server.DatagramRequestHandler,
                      ...):
                        ...
              - pattern-either:
                  - pattern: self.$PROPERTY
                  - pattern: self.$PROPERTY.get(...)
                  - pattern: self.$PROPERTY[...]
              - metavariable-regex:
                  metavariable: $PROPERTY
                  regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
    pattern-sinks:
              - patterns:
                  - pattern: |
                      yaml.$FUNC($SINK, ...)
                  - pattern-not: |
                      yaml.$FUNC($SINK, ..., Loader=yaml.SafeLoader, ...)
                  - pattern-not: |
                      yaml.$FUNC($SINK, ..., Loader=yaml.CSafeLoader, ...)
                  - pattern-not-inside: |
                      yaml = YAML(...)
                      ...
                  - metavariable-regex:
                      metavariable: $FUNC
                      regex: ^(load|load_all|unsafe_load)$
    message: >-
      Insecure deserialization (called pickling in python) is when user-controllable data is deserialized by an application. 
      This potentially enables an attacker to manipulate serialized objects in order to pass harmful data into the application code.
      Many deserialization-based attacks are completed before deserialization is finished. 
      This means that the deserialization process itself can initiate an attack, even if the app's own functionality does not directly interact with the malicious object.
      PyYAML's `yaml` module is as powerful as `pickle` and so may call any Python function. It is recommended to secure your application by using `yaml.SafeLoader` or `yaml.CSafeLoader`.
    metadata:
      references:
        - https://portswigger.net/web-security/deserialization
        - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
        - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
        - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
        - https://cwe.mitre.org/data/definitions/502.html
      owasp:
        - A08:2017 - Insecure Deserialization
        - A08:2021 - Software and Data Integrity Failures
      cwe:
        - "CWE-502: Deserialization of Untrusted Data"
      category: security
      technology:
        - python
        - yaml
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: HIGH
    languages:
      - python
    severity: ERROR
